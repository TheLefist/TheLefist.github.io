{"version":3,"sources":["graphql/mutations.js","components/auth/Login.js","graphql/queries.js","components/genres/GenreIndex.jsx","util/route_util.js","components/navigation/Nav.js","components/auth/Register.js","components/navigation/SideBar.js","components/Song_Item.jsx","components/Artist_item.jsx","components/navigation/Search.js","components/navigation/Account.js","components/playlists/playlist_index.jsx","util/loading_cloud.js","components/player/CurrentSongShow.jsx","components/player/MusicPlayer.js","components/playlists/new_playlist.jsx","components/playlists/add_song_to_playlist.jsx","components/modal/Modal.js","components/genres/GenreShow.jsx","components/Artist_Show.jsx","components/playlists/playlist_show_item.jsx","components/playlists/playlist_show.jsx","components/favorites/FavoritesIndex.jsx","components/App.js","serviceWorker.js","resolvers.js","index.js"],"names":["NEW_PLAYLIST","gql","DELETE_PLAYLIST","ADD_PLAYLIST_SONG","REMOVE_PLAYLIST_SONG","LOGIN_USER","VERIFY_USER","REGISTER_USER","ADD_SONG_LIKE","REMOVE_SONG_LIKE","Mutations","Login","props","state","email","password","signupRedirect","bind","field","e","setState","target","value","client","data","writeData","isLoggedIn","login","loggedIn","currentUser","_id","this","history","push","className","mutation","onCompleted","token","localStorage","setItem","update","updateCache","onError","error","console","log","loginUser","onSubmit","preventDefault","variables","onChange","placeholder","type","graphQLErrors","message","style","display","id","onClick","Component","CURRENT_USER","FETCH_PLAYLIST","FETCH_PLAYLISTS","IS_LOGGED_IN","FETCH_ALL_SONGS","FETCH_ALL_ARTISTS","FETCH_ALL_GENRES","FETCH_ARTIST","FETCH_GENRE","FETCH_SONG","FETCH_FILTERED_SONGS","FETCH_GENRE_SONGS","FETCH_LIKED_SONGS","GenreIndex","query","Queries","loading","class","genres","map","genre","i","src","imageUrl","to","name","React","AuthRoute","component","path","exact","routeType","rest","render","withRouter","removeItem","Register","register","registerUser","updateDemoCache","OPEN_MODAL_MUTATION","NavBar","openNewPlaylistModalMutation","PLAY_SONG_MUTATION","SongItem","song","songStyle","marginTop","height","width","backgroundImage","backgroundSize","playSongMutation","alt","title","ArtistItem","artist","artistStyle","backgroundPostition","queries","SearchBar","search","songs","artists","onSongFetch","currentTarget","filteredSongs","filteredArtists","artistIds","length","toLowerCase","includes","searchedSongs","searchedArtists","then","Account","PLAY_PLAYLIST_MUTATION","PlaylistIndex","setImages","createImages","playlistSongs","songImages","undefined","slice","img","userPlaylists","playlists","user","songCount","playPlaylistMutation","rainCloud","CurrentSongShow","songId","bSide","prevProps","description","CURRENT_MUSIC_QUERY","MusicPlayer","playlist","prevSongs","playing","minimized","volume","nextEventAttached","timeInputVal","playNext","changeVolume","receiveNewPlaylist","changeCurrentTime","shuffleGenreSongs","window","player","document","getElementById","pause","addEventListener","currentTime","duration","Math","floor","innerHTML","clone","cloneNode","parentNode","replaceChild","musicType","songUrl","getItem","play","load","newList","newTime","parseInt","temp","randomIdx","random","volumeIcon","musicPlayer","playOrPause","paused","Object","assign","fastForward","timeInput","volumeInput","currentSong","currentSongTitle","currentSongModule","currentMusic","j","likedSongs","PlaylistCreate","handleSubmit","newPlaylist","closeModal","AddSongToPlaylist","addSong","playlistId","viewBox","d","stroke","fill","fillRule","MODAL_OPEN_QUERY","MODAL_TYPE_QUERY","CLOSE_MODAL_MUTATION","Modal","isModalOpen","modalType","stopPropagation","PLAY_GENRE_MUTATION","GenreShow","playingGenre","playingSongId","renderLikeButton","currentUserId","likes","refetchQueries","removeSongLike","userId","addSongLike","match","params","genreId","playGenreMutation","openNewPlaylistSongModalMutation","ArtistShow","artistId","location","href","split","banner","background","backgroundPosition","artistSongs","PlaylistShowItem","noteIcon","noteContainerClass","menuVisible","playNote","musicNote","toggleMenu","prevState","onMouseEnter","onMouseLeave","removeSong","PlaylistShow","deletePlaylist","catch","err","PLAY_LIKED_SONGS","FavoritesIndex","getLikedSongs","renderTrashIcon","currentlyLiked","newLikedSongs","App","SideBar","Nav","Search","Boolean","hostname","tempUri","cache","resolvers","Mutation","_","args","closeModalMutation","keys","forEach","key","delete","__typename","JSON","stringify","playLikedSongs","a","InMemoryCache","dataIdFromObject","object","httpLink","createHttpLink","uri","headers","authorization","ApolloClient","link","networkError","mutate","verifyUser","setupClient","populateCache","Root","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.972464ec.chunk.js","sourcesContent":["import gql from \"graphql-tag\";\n\nexport default {\n  NEW_PLAYLIST: gql`\n    mutation NewPlaylist($title: String, $description: String, $user: ID) {\n      newPlaylist(title: $title, description: $description, user: $user) {\n        _id\n        title\n        description\n      }\n    }\n  `,\n  DELETE_PLAYLIST: gql`\n    mutation DeletePlaylist($id: ID!) {\n      deletePlaylist(id: $id) {\n        _id\n      }\n    }\n  `,\n  ADD_PLAYLIST_SONG: gql`\n    mutation AddPlaylistSong($playlistId: ID, $songId: ID) {\n      addPlaylistSong(playlistId: $playlistId, songId: $songId) {\n        _id\n        title\n        songs {\n          _id\n          title\n          artist {\n            _id\n            name\n          }\n        }\n      }\n    }\n  `,\n  REMOVE_PLAYLIST_SONG: gql`\n    mutation RemovePlaylistSong($playlistId: ID, $songId: ID) {\n      removePlaylistSong(playlistId: $playlistId, songId: $songId) {\n        _id\n        title\n        songs {\n          _id\n          title\n          artist {\n            _id\n            name\n          }\n        }\n      }\n    }\n  `,\n  LOGIN_USER: gql`\n    mutation LoginUser($email: String!, $password: String!) {\n      login(email: $email, password: $password) {\n        token\n        loggedIn\n        _id\n      }\n    }\n  `,\n  VERIFY_USER: gql`\n    mutation VerifyUser($token: String!) {\n      verifyUser(token: $token) {\n        loggedIn\n        _id\n      }\n    }\n  `,\n  REGISTER_USER: gql`\n    mutation RegisterUser($name: String!, $email: String!, $password: String!) {\n      register(name: $name, email: $email, password: $password) {\n        email\n        token\n        loggedIn\n        _id\n      }\n    }\n  `,\n  ADD_SONG_LIKE: gql`\n    mutation AddSongLike($songId: ID!, $userId: ID!) {\n      addSongLike(songId: $songId, userId: $userId) {\n        _id\n        likes\n      }\n    }\n  `,\n  REMOVE_SONG_LIKE: gql`\n    mutation RemoveSongLike($songId: ID!, $userId: ID!) {\n      removeSongLike(songId: $songId, userId: $userId) {\n        _id\n        likes\n      }\n    }\n  `\n};\n","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../../graphql/mutations\";\nconst { LOGIN_USER } = Mutations;\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\"\n    };\n\n    this.signupRedirect = this.signupRedirect.bind(this);\n    // this.handleDemoUser = this.handleDemoUser.bind(this);\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(client, { data }) {\n    client.writeData({\n      data: { isLoggedIn: data.login.loggedIn, currentUser: data.login._id }\n    });\n  }\n\n  signupRedirect() {\n    this.props.history.push(\"/register\");\n  }\n\n  render() {\n    return (\n      <div className=\"auth-page-container\">\n        <Mutation\n          mutation={LOGIN_USER}\n          onCompleted={data => {\n            const { token } = data.login;\n            localStorage.setItem(\"currentUser\", data.login._id);\n            localStorage.setItem(\"auth-token\", token);\n            this.props.history.push(\"/\");\n          }}\n          update={(client, data) => this.updateCache(client, data)}\n          onError={error => {\n            console.log(\"ERROR in SigninBox \", { error });\n          }}\n        >\n          {(loginUser, { error }) => (\n            <div className=\"login\">\n              <div className=\"signup-header\">\n              </div>\n              <div className=\"content-login-1\">\n                <form\n                  className=\"form\"\n                  onSubmit={e => {\n                    e.preventDefault();\n                    loginUser({\n                      variables: {\n                        email: this.state.email,\n                        password: this.state.password\n                      }\n                    });\n                  }}\n                >\n                  <br />\n                  <br />\n                  <label>\n                    <input\n                      value={this.state.email}\n                      onChange={this.update(\"email\")}\n                      className=\"input-register-2\"\n                      placeholder=\"Email\"\n                    />\n                  </label>\n                  <br />\n                  <label>\n                    <input\n                      value={this.state.password}\n                      onChange={this.update(\"password\")}\n                      className=\"input-register-2\"\n                      type=\"password\"\n                      placeholder=\"Пароль\"\n                    />\n                    {error ? (\n                      <div className=\"input-error\">\n                        {error.graphQLErrors[0].message}\n                      </div>\n                    ) : (\n                      <div style={{ display: \"none\" }}>{null}</div>\n                    )}\n                  </label>\n                  <br />\n                  <button type=\"submit\" className=\"login-submit\">\n                    Войти в аккаунт\n                  </button>\n                </form>\n                <span id=\"no-account-q\">У вас нет учетной записи?</span>\n                <button\n                  type=\"submit\"\n                  className=\"signup-button\"\n                  onClick={this.signupRedirect}\n                >\n                    Зарегистрироваться\n                </button>\n              </div>\n            </div>\n          )}\n        </Mutation>\n      </div>\n    );\n  }\n}\n\nexport default Login;","import gql from \"graphql-tag\";\n\nexport default {\n  CURRENT_USER: gql`\n    query CurrentUser {\n      currentUser @client,\n      isLoggedIn @client\n    }\n  `,\n  FETCH_PLAYLIST: gql`\n    query FetchPlaylist($id: ID!) {\n      playlist(_id: $id) {\n        _id\n        title\n        description\n        songs {\n          _id\n          artist {\n            _id\n            name\n          }\n          title\n          imageUrl\n          songUrl\n        }\n      }\n    }\n  `,\n  FETCH_PLAYLISTS: gql`\n    query FetchPlaylists {\n      playlists {\n        _id\n        title\n        description\n        user {\n          name\n          _id\n        }\n        songs {\n          _id\n          artist {\n            _id\n            name\n          }\n          title\n          imageUrl\n          songUrl\n        }\n      }\n    }\n  `,\n  IS_LOGGED_IN: gql`\n    query IsUserLoggedIn {\n      isLoggedIn @client\n    }\n  `,\n  FETCH_ALL_SONGS: gql` \n    query FetchAllSongs {\n      songs {\n        _id\n        title\n        imageUrl\n        songUrl\n        artist {\n          _id\n          name\n          imageUrl\n        }\n      }\n    }\n  `,\n  FETCH_ALL_ARTISTS: gql` \n    query FetchAllArtists {\n      artists {\n        _id\n        name\n        imageUrl\n        songs {\n          _id\n          title\n          likes\n        }\n        genres {\n          _id\n          name\n        }\n      }\n    }\n  `,\n  FETCH_ALL_GENRES: gql` \n    query FetchAllGenres {\n      genres {\n        _id\n        name\n        imageUrl\n        artists {\n          _id\n          name\n          imageUrl\n        }\n      }\n    }\n  `,\n\n  FETCH_ARTIST: gql`\n    query FetchArtist($id: ID!) {\n      artist(_id: $id) {\n        _id\n        name\n        songs {\n          _id\n          name\n        }\n        genres {\n          _id\n          name\n        }\n        imageUrl\n        description\n      }\n    }\n  `,\n  FETCH_GENRE: gql`\n    query FetchGenre($id: ID!) {\n      genre(_id: $id) {\n        _id\n        name\n        imageUrl\n        artists {\n          _id\n          name\n          imageUrl\n          songs {\n            _id\n            title\n            likes\n          }\n        }\n      }\n    }\n  `,\n  FETCH_SONG: gql`\n    query FetchSong($id: ID!) {\n      song(_id: $id) {\n        _id\n        title\n        songUrl\n        imageUrl\n        artist {\n          _id\n          name\n          imageUrl\n          description\n          genres {\n            _id\n            name\n          }\n        }\n      }\n    }\n  `,\n  FETCH_FILTERED_SONGS: gql`\n  query FetchFilteredSongs($filter: String!) {\n    feed{\n      songs {\n        _id\n        title\n        imageUrl\n        songUrl\n        artist {\n          _id\n          name\n          imageUrl\n        }\n      }\n    }\n  }\n`,\n  FETCH_GENRE_SONGS: gql`\n    query FetchGenreSongs($id: ID!) {\n      genre(_id: $id) {\n        _id\n        name\n        artists {\n          _id\n          songs {\n            _id\n            title\n            songUrl\n            imageUrl\n            likes\n          }\n        }\n      }\n    }\n  `,\n  FETCH_LIKED_SONGS: gql`\n    query FetchLikedSongs($id: ID!) {\n      user(_id: $id) {\n        _id\n        email\n        likedSongs {\n          _id\n          title\n          imageUrl\n          songUrl\n          artist {\n            _id\n            name\n            imageUrl\n          }\n          likes\n        }\n      }\n    }\n  `,\n};\n\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\nimport { Link } from \"react-router-dom\";\n\nclass GenreIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"genre-index-main\">\n        <div className=\"genre-index-homepage-header\">\n          <h1 className=\"genre-index-header homepage-header\">\n              {/*Заголовок*/}\n            <span className=\"artist-banner-name\">\n              Главная\n          </span></h1>\n        </div>\n          {/*Запрос на получение*/}\n        <Query query={Queries.FETCH_ALL_GENRES}>\n          {({ loading, error, data }) => {\n            if (loading) return <div class=\"loader\">Загрузка...</div>;\n            if (error) return <p>Ошибка</p>;\n            \n            return (\n              <ul className=\"genre-index-list\">\n                { \n                  data.genres.map((genre, i) => {\n                    return (\n                      <li key={genre._id} className=\"genre-index-item\">\n                        <img src={genre.imageUrl} className=\"genre-index-item-image\"/>\n                        <Link to={`/genres/${genre._id}`} className=\"genre-index-item-link\">\n                          <p className=\"genre-index-item-name\">{ genre.name }</p>\n                        </Link>\n                      </li>\n                    )\n                  })\n                }\n                <li className=\"genre-index-item-hidden\"/>\n                <li className=\"genre-index-item-hidden\"/>\n                <li className=\"genre-index-item-hidden\"/>\n                <li className=\"genre-index-item-hidden\"/>\n              </ul>\n            )\n          }}\n        </Query>\n      </div>\n    )\n  }\n}\n\nexport default GenreIndex;","import React from \"react\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport { Query } from \"react-apollo\";\nimport Queries from \"../graphql/queries\";\nconst { IS_LOGGED_IN } = Queries;\n\n// our route switches on routeType\nconst AuthRoute = ({\n  component: Component,\n  path,\n  exact,\n  routeType,\n  ...rest\n}) => (\n    <Query query={IS_LOGGED_IN}>\n      {({ data }) => {\n        // if the route type is \"auth\" then this route will only render if the\n        // user is not logged in - useful for authentication routes\n        // like login or register\n        if (routeType === \"auth\") {\n          return (\n            <Route\n              path={path}\n              exact={exact}\n              render={props =>\n                !data.isLoggedIn ? <Component {...props} /> : <Redirect to=\"/\" />\n              }\n            />\n          );\n        } else {\n          // otherwise this will be a protected route which will only\n          // render the component if the user is logged in\n          return (\n            <Route\n              {...rest}\n              render={props =>\n                data.isLoggedIn ? (\n                  <Component {...props} />\n                ) : (\n                    <Redirect to=\"/login\" />\n                  )\n              }\n            />\n          );\n        }\n      }}\n    </Query>\n  );\n\nexport default AuthRoute;","import React from \"react\";\nimport { Link, withRouter } from \"react-router-dom\";\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\nconst { IS_LOGGED_IN } = Queries;\n\n\nconst Nav = props => {\n  return (\n    <div className=\"auth-buttons\">\n    <ApolloConsumer>\n      {client => (\n        <Query query={IS_LOGGED_IN}>\n          {({ data }) => {\n            if (data.isLoggedIn) {\n              return (\n                <div \n                  className='account-button'\n                  onClick={e => {\n                    e.preventDefault();\n                    localStorage.removeItem(\"auth-token\");\n                    client.writeData({ data: { isLoggedIn: false } });\n                    props.history.push(\"/\");\n                  }}\n                >\n                  Выйти\n                </div>\n              );\n            }\n          }}\n        </Query>\n      )}\n    </ApolloConsumer>\n    </div>\n  );\n};\n\nexport default withRouter(Nav);","import React, { Component } from \"react\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../../graphql/mutations\";\nimport { Link } from \"react-router-dom\";\n\nconst { REGISTER_USER, LOGIN_USER } = Mutations;\n\nclass Register extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      email: \"\",\n      password: \"\",\n      name: \"\"\n    };\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  updateCache(client, { data }) {\n    client.writeData({\n      data: { isLoggedIn: data.register.loggedIn, currentUser: data.register._id }\n    });\n  }\n\n  updateDemoCache(client, { data }) {\n    client.writeData({\n      data: { isLoggedIn: data.login.loggedIn, currentUser: data.login._id }\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"auth-page-container\">\n      <Mutation\n        mutation={REGISTER_USER}\n        onCompleted={data => {\n          const { token } = data.register;\n          localStorage.setItem(\"currentUser\", data.register._id);\n          localStorage.setItem(\"auth-token\", token);\n        }}\n        update={(client, data) => this.updateCache(client, data)}\n        onError={error => {\n          console.log(\"ERROR in SignupBox \", { error });\n        }}\n      >\n        {(registerUser, { error }) => (\n          <div className=\"signup\">\n            <div className=\"signup-header\">\n            </div>\n            <div className=\"content\">\n              <Mutation\n                mutation={LOGIN_USER}\n                onCompleted={data => {\n                  const { token } = data.login;\n                  localStorage.setItem(\"auth-token\", token);\n                  this.props.history.push(\"/\");\n                }}\n                update={(client, data) => this.updateDemoCache(client, data)}\n              >\n              </Mutation>\n\n              <form\n                onSubmit={e => {\n                  e.preventDefault();\n                  registerUser({\n                    variables: {\n                      name: this.state.name,\n                      email: this.state.email,\n                      password: this.state.password\n                    }\n                  });\n                }}\n              >\n                <br />\n                <div className=\"login-form\">\n                  <br />\n                  <label>\n                    <input\n                      value={this.state.name}\n                      onChange={this.update(\"name\")}\n                      className=\"input-register-1\"\n                      placeholder=\"Имя\"\n                    />\n                  </label>\n                  <br />\n                  <label>\n                    <input\n                      value={this.state.email}\n                      onChange={this.update(\"email\")}\n                      className=\"input-register-1\"\n                      placeholder=\"Email\"\n                    />\n                  </label>\n                  <br />\n                  <label>\n                    <input\n                      value={this.state.password}\n                      onChange={this.update(\"password\")}\n                      className=\"input-register-1\"\n                      type=\"password\"\n                      placeholder=\"Пароль\"\n                    />\n                    {error ? (\n                      <div className=\"input-error\">\n                        {error.graphQLErrors[0].message}\n                      </div>\n                    ) : (\n                      <div style={{ display: \"none\" }}>{null}</div>\n                    )}\n                  </label>\n                  <br />\n                  <button type=\"submit\" className=\"signup-submit\">\n                    Зарегистрироваться\n                  </button>\n                  <div className=\"login-prompt\">\n                    У вас уже есть учетная запись?\n                    <Link id=\"login-highlight\" to=\"/login\">\n                      Войти\n                    </Link>\n                  </div>\n                </div>\n              </form>\n            </div>\n          </div>\n        )}\n      </Mutation>\n      </div>\n    );\n  }\n}\n\nexport default Register;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { Query } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst { FETCH_PLAYLISTS, CURRENT_USER } = Queries;\n\nconst OPEN_MODAL_MUTATION = gql`\n  mutation {\n    openNewPlaylistModalMutation @client\n  }\n`;\n\nclass NavBar extends React.Component{\n  constructor(props){\n    super(props);\n  }\n\n  render(){\n    return (\n      <div className=\"SideBar\">\n        <div className=\"SideBar-Logo\">\n        </div>\n        <div className=\"User-Nav\">\n          <div className=\"nav-home\">\n            <Link to=\"/\" className=\"home-link\">\n              Главная\n            </Link>\n          </div>\n          <div className=\"nav-search\">\n            <Link to=\"/search\" className=\"search-link\">\n              Поиск\n            </Link>\n          </div>\n          <div className=\"nav-library\">\n            <Link to=\"/library/playlists\" className=\"library-link\">\n              Плейлисты\n            </Link>\n          </div>\n          <div className=\"nav-favorites\">\n            <Link to=\"/favorites\" className=\"favorites-link\">\n              Понравившиеся\n            </Link>\n          </div>\n          <div className=\"nav-create-playlist\">\n            <Mutation mutation={OPEN_MODAL_MUTATION}>\n              {openNewPlaylistModalMutation => (\n                  <div\n                      className=\"nav-create-playlist-title\"\n                      onClick={openNewPlaylistModalMutation}\n                  >\n                    Создать плейлист +\n                  </div>\n              )}\n            </Mutation>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default NavBar;","import React from 'react';\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst PLAY_SONG_MUTATION = gql`\n  mutation {\n    playSongMutation(id: $id) @client\n  }\n`\n\nconst SongItem = (song) => {\n  const songStyle = {\n    marginTop: '20px',\n    height: '130px',\n    width: '130px',\n    backgroundImage: `url(${song.imageUrl})`,\n    backgroundSize: 'cover'\n  }\n  return (\n    <div className='song-item'>\n      <div className='song-image' style={songStyle}>\n        <Mutation mutation={PLAY_SONG_MUTATION}>\n          {\n            playSongMutation => {\n              return (\n                <div className='song-click' onClick={() => {\n                  playSongMutation(\n                    { variables: { id: song._id } }\n                  )\n                }}>\n                    <img\n                        id=\"Mike\"\n                        src=\"https://spottocry.s3-us-west-1.amazonaws.com/play_white.png\"\n                        alt=\"\"\n                    />\n                </div>\n              )\n            }\n          }\n        </Mutation>\n      </div>\n      <div className='song-info'>\n        <p className='info-name'>{song.title}</p>\n      </div>\n    </div>\n  );\n}\n\nexport default SongItem;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ArtistItem = (artist) => {\n  const artistStyle = {\n    marginTop: '20px',\n    height: '130px',\n    width: '130px',\n    backgroundImage: `url(${artist.imageUrl})`,\n    backgroundSize: 'cover',\n    backgroundPostition: 'center'\n  }\n  return (\n    <Link to={`artists/${artist._id}`}>\n      <div className='artist-item'\n        onClick={ () => console.log(`Navigate to ${artist.name} show page`)}>\n        <div \n          className='artist-image'\n          style={artistStyle}\n          >\n        </div>\n        <div className='artist-info'>\n          <p className='info-name'>{artist.name}</p>\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nexport default ArtistItem;","import React from 'react';\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport SongItem from '../Song_Item';\nimport ArtistItem from '../Artist_item';\nimport queries from '../../graphql/queries';\nconst {FETCH_ALL_SONGS} = queries;\n\nclass SearchBar extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      search: '',\n      songs: [],\n      artists: []\n    }\n    this.update = this.update.bind(this);\n    this.onSongFetch = this.onSongFetch.bind(this);\n  }\n\n  update(e){\n    this.setState({ search: e.currentTarget.value});\n  }\n\n  onSongFetch(songs){\n    const filteredSongs = [];\n    const filteredArtists = [];\n    const artists = [];\n    const artistIds = [];\n\n    for (let i = 0; i < songs.length; i++) {\n      const title = songs[i].title.toLowerCase();\n      const name = songs[i].artist.name.toLowerCase();\n      if (title.includes(this.state.search.toLowerCase())) {\n        filteredSongs.push(songs[i]);\n      }\n      if (name.includes(this.state.search.toLowerCase())) {\n        if (!artistIds.includes(songs[i].artist._id)) {\n          artistIds.push(songs[i].artist._id);\n          filteredArtists.push(songs[i].artist);\n          artists.push(songs[i].artist);\n        }\n      }\n    }\n    if (this.state.search === '') {\n      return this.setState({ artists: artists, songs: songs })\n    }\n    this.setState({ artists: filteredArtists, songs: filteredSongs })\n  }\n\n  render(){\n    const searchedSongs = this.state.songs.map(( song ) => (\n      <li key={song.id}>\n        {SongItem(song)}\n      </li>\n    ));\n\n    const searchedArtists = this.state.artists.map((artist) => (\n      <li key={artist.id}>\n        {ArtistItem(artist)}\n      </li>\n    ))\n\n    return (\n      <ApolloConsumer>\n        {client => {\n          if (this.state.songs.length === 0){\n          const { data } = client.query({\n              query: FETCH_ALL_SONGS\n            }).then((data) => {\n              if (this.state.search.length === 0){\n                this.onSongFetch(data.data.songs)\n              }})};\n\n          return (\n            <div className='search'>\n              <div className='search-bar'>\n                <div className='search-image'>\n                </div>\n                <input\n                  className='search-input'\n                  placeholder='Поиск исполнителя или композиции'\n                  onChange={(e) => {\n                    this.update(e)\n                    const { data } = client.query({\n                      query: FETCH_ALL_SONGS\n                    }).then((data) => {\n                    this.onSongFetch(data.data.songs)\n                    })\n                  }}\n                  value={this.state.search}\n                />\n              </div>\n              <div className='search-results'>\n                <div className='search-songs'>Композиции</div>\n                <ul className='searched-songs'>\n                  {searchedSongs}\n                </ul>\n                <div className='search-artist'>Исполнители</div>\n                <ul className='searched-artists'>\n                  {searchedArtists}\n                </ul>\n              </div>\n            </div>\n          )\n        }}\n      </ApolloConsumer>\n    );\n  }\n}\n\nexport default SearchBar;","import React from 'react';\nimport { Query, ApolloConsumer } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\nconst { IS_LOGGED_IN } = Queries;\n\nconst Account = props => {\n  return (\n    <div className='account'>\n      <ApolloConsumer>\n        {client => (\n          <Query query={IS_LOGGED_IN}>\n            {({ data }) => {\n              if (data.isLoggedIn) {\n                return (\n                  <button\n                    className='logout-button'\n                    onClick={e => {\n                      e.preventDefault();\n                      localStorage.removeItem(\"auth-token\");\n                      client.writeData({ data: { isLoggedIn: false } });\n                      props.history.push(\"/\");\n                    }}\n                  >\n                      Выйти из аккаунта\n                  </button>\n                );\n              }\n            }}\n          </Query>\n        )}\n      </ApolloConsumer>\n    </div>\n  );\n}\n\nexport default Account;","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport { Mutation } from \"react-apollo\";\nimport { Link } from \"react-router-dom\";\nimport Queries from \"../../graphql/queries\";\nimport gql from \"graphql-tag\";\n\nconst { FETCH_PLAYLISTS, CURRENT_USER } = Queries;\n\nconst PLAY_PLAYLIST_MUTATION = gql`\n  mutation {\n    playPlaylistMutation(id: $id) @client\n  }\n`;\n\nclass PlaylistIndex extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setImages = this.setImages.bind(this);\n    this.createImages = this.createImages.bind(this);\n  }\n\n  setImages(playlistSongs) {\n    let songImages = [];\n    if (playlistSongs !== undefined) {\n      songImages = playlistSongs.map(song => {\n        return song.imageUrl;\n      });\n    }\n    return this.createImages(songImages);\n  }\n\n  createImages(songImages) {\n    if (songImages.length >= 1 && songImages.length < 4) {\n      return (\n        <div className=\"playlist-art-container\">\n          <img src={songImages[0]} alt=\"\" />\n        </div>\n      );\n    } else if (songImages.length >= 4) {\n      return songImages.slice(0, 4).map(img => {\n        return (\n          <div key={img} className=\"playlist-idx-coverArt-item\">\n            <img src={img} alt=\"\"/>\n          </div>\n        );\n      });\n    } else {\n      return (\n        <div className=\"playlist-art-container\">\n          <img src=\"https://www.andrewwkmusic.com/wp-content/uploads/2014/05/No-album-art-itunes.jpg\" />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"playlist-index-main\">\n        <h1 className=\"genre-index-header\">\n          <span className=\"artist-banner-name\">Плейлисты</span>\n        </h1>\n        <Query query={CURRENT_USER}>\n          {({ loading, error, data }) => {\n            if (loading) return <option>Загрузка...</option>;\n            if (error) return <option>{error}</option>;\n            const { currentUser } = data;\n            \n            return (\n              <Query query={FETCH_PLAYLISTS}>\n                {({ loading, error, data }) => {\n                  if (loading) return <div class=\"loader\">Загрузка...</div>;\n                  if (error) return <p>{error}</p>;\n   \n                  let userPlaylists = data.playlists.map(({ _id, title, songs, user }) => {\n                    if (user._id === currentUser) {\n                      let songCount = songs.length;\n\n                      return (\n                        <div key={title} className=\"album-artist-container\">\n                          <div className=\"image-hover-container\">\n                            <div className=\"playlist-idx-cover-container\">\n                              {this.setImages(songs)}\n                            </div>\n                            <div className=\"Mike\">\n                              {songCount > 0 && (\n                                <Mutation mutation={PLAY_PLAYLIST_MUTATION}>\n                                  {playPlaylistMutation => (\n                                    <button id=\"Mike-button\" onClick={() => {\n                                        playPlaylistMutation({\n                                          variables: {\n                                            id: _id\n                                          }\n                                        });\n                                      }}\n                                    >\n                                    <img id=\"Mike\" src=\"https://i.ibb.co/58VgZKH/play-white.png\" alt=\"\"/>\n                                    </button>\n                                  )}\n                                </Mutation>\n                              )}\n                            </div>\n                          </div>\n                          <Link id=\"playlist-grid-title\" to={`/playlists/${_id}`}>\n                            <div className=\"title-container\">{title}</div>\n                          </Link>\n                        </div>\n                      );\n                    }\n                  });\n\n                  return (\n                    <div className=\"playlist-index-container\">{userPlaylists}</div>\n                  );\n                }}\n              </Query>\n            );\n          }}\n        </Query>\n      </div>\n    );\n  }\n}\n\nexport default PlaylistIndex;\n","import React from 'react';\n\nexport const rainCloud = (\n  <div className=\"cloud-container\">\n    <div id=\"cloud\">\n      <span className=\"shadow\"></span>\n      <div className=\"rain\">\n        <div className=\"drop d1\"></div>\n        <div className=\"drop d2\"></div>\n        <div className=\"drop d3\"></div>\n        <div className=\"drop d4\"></div>\n        <div className=\"drop d5\"></div>\n        <div className=\"drop d6\"></div>\n        <div className=\"drop d7\"></div>\n        <div className=\"drop d8\"></div>\n        <div className=\"drop d9\"></div>\n        <div className=\"drop d10\"></div>\n        <div className=\"drop d11\"></div>\n        <div className=\"drop d12\"></div>\n        <div className=\"drop d13\"></div>\n        <div className=\"drop d14\"></div>\n        <div className=\"drop d15\"></div>\n      </div>\n    </div>\n  </div>\n)","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\n\nclass CurrentSongShow extends React.Component {\n\n  constructor(props) {\n    super(props);\n  \n    this.state = {\n      songId: this.props.songId,\n      bSide: false\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    if (prevProps !== this.props) {\n      this.setState({\n        songId: this.props.songId,\n        bSide: false\n      })\n    }\n  }\n\n  render() {\n    return (\n      <Query query={ Queries.FETCH_SONG } variables={{ id: this.state.songId }}>\n        {({ loading, error, data }) => {\n          if (loading) return <p className=\"current-song-load-err\">Loading...</p>;\n          if (error) return <p className=\"current-song-load-err\">Error</p>;\n\n          if (!this.state.bSide) {\n            return (\n              <div className=\"current-song-show-main\">\n                <div className=\"current-song-show-A\">\n                  <div className=\"current-song-image-container\">\n                    <img className=\"current-song-image\" \n                      src={data.song.imageUrl} \n                      onClick={() => this.setState({ bSide: true })}\n                    />\n                  </div>\n                  <div className=\"current-song-info\">\n                    <p className=\"current-song-info-title\">\n                      {data.song.title}\n                    </p>\n                    <p className=\"current-song-info-artist\">\n                      {data.song.artist.name}\n                    </p>\n                  </div>\n                </div>\n              </div>\n            )\n          } else {\n            return (\n              <div className=\"current-song-show-main\">\n                <div className=\"current-song-show-B\">\n                  <div className=\"current-song-image-container\">\n                    <img className=\"current-song-image\" \n                      src={data.song.artist.imageUrl} \n                      onClick={() => this.setState({ bSide: false })}\n                    />\n                  </div>\n                  <div className=\"current-artist-info\">\n                    <p className=\"current-song-info-title\">\n                      {data.song.artist.name}\n                    </p>\n                    <div className=\"current-artist-genres\">\n                      <ul>\n                      {data.song.artist.genres.map(\n                        genre => <li key={genre._id}>{genre.name}</li>\n                      )}\n                      </ul>\n                    </div>\n                    <div className=\"current-artist-description\">\n                      <p>\n                        {/* {data.song.artist.description} */}\n                        {data.song.artist._id === \"5e0534bd2ba87036631c6603\" ? (\n                          \"22-year-old Eli Raybon has quickly established himself as a sci-fi weirdo auteur. The staunch non-conformist is now priming his most alluring release yet: a fully-fledged, sci-fi concept album called Supertoys. The record is pure retro-futurism, combining cyberpunk storytelling and disco beats with a myriad of analog synth work.\"\n                        ) : (\n                          data.song.artist.description\n                        )}\n                      </p>\n                    </div>\n                  </div>\n                  \n                </div>\n              </div>\n            )\n          }\n        }}\n      </Query>\n    )\n  }\n}\n\nexport default CurrentSongShow;\n","import React from \"react\";\nimport { rainCloud } from \"../../util/loading_cloud\";\nimport CurrentSongShow from \"./CurrentSongShow\";\nimport gql from \"graphql-tag\";\nimport { Query } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\n\nconst CURRENT_MUSIC_QUERY = gql`\n  query {\n    currentMusic {\n      id\n      musicType\n    }\n  }\n`;\n\n\nclass MusicPlayer extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: true,\n      playlist: [],\n      prevSongs: [],\n      playing: false,\n      minimized: true,\n      volume: 0.5,\n      nextEventAttached: false,\n      timeInputVal: 0\n    };\n    this.playNext = this.playNext.bind(this);\n    this.changeVolume = this.changeVolume.bind(this);\n    this.receiveNewPlaylist = this.receiveNewPlaylist.bind(this);\n    this.changeCurrentTime = this.changeCurrentTime.bind(this);\n    this.shuffleGenreSongs = this.shuffleGenreSongs.bind(this);\n  }\n\n\n  componentDidMount() {\n    if (!window.player) {\n      window.player = document.getElementById('player');\n      window.player.volume = this.state.volume;\n      this.setState({playlist: [], playing: false});\n    }\n    if(window.player) {\n      window.player.pause();\n    }\n  }\n\n  componentDidUpdate() {\n    if (window.player && this.state.loading === true) {\n      window.player.addEventListener(\"ended\", () => {\n        this.playNext();\n      });\n      window.player.addEventListener(\"timeupdate\", function () {\n        let currentTime;\n        let duration;\n        if (!window.player) return null;\n        if (window.player.currentTime) {\n          if (Math.floor(window.player.currentTime % 60) < 10) {\n            currentTime = (\n              `${Math.floor(window.player.currentTime / 60)}` + (\n                `:0${Math.floor(window.player.currentTime % 60)}`\n              )\n            )\n          } else {\n            currentTime = (\n              `${Math.floor(window.player.currentTime / 60)}` + (\n                `:${Math.floor(window.player.currentTime % 60)}`\n              )\n            )\n          }\n        } else {\n          currentTime = \"0:00\";\n        }\n        if (window.player.duration) {\n          if (Math.floor(window.player.duration % 60) < 10) {\n            duration = (\n              `${Math.floor(window.player.duration / 60)}` + (\n                `:0${Math.floor(window.player.duration % 60)}`\n              )\n            )\n          } else {\n            duration = (\n              `${Math.floor(window.player.duration / 60)}` + (\n                `:${Math.floor(window.player.duration % 60)}`\n              )\n            )\n          }\n        } else {\n          duration = \"0:00\";\n        }\n        document.getElementById('tracktime-1').innerHTML = (\n          currentTime \n        );\n        document.getElementById('tracktime-2').innerHTML = (\n          duration\n        );\n      });\n\n      window.player.addEventListener(\"timeupdate\", function () {\n        if (document.getElementById(\"timeskip\")) {\n          document.getElementById(\"timeskip\").value = (\n            Math.floor(\n              (window.player.currentTime / window.player.duration) * 100\n            )\n          )\n        }\n      });\n      \n      this.setState({\n        loading: false, \n        currentTime: window.player.currentTime, \n        duration: window.player.duration\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    window.localStorage.setItem(\"currentMusic\", \"none\");\n    window.player = null;\n    let clone = document.getElementById(\"player\").cloneNode(true);\n    let player = document.getElementById(\"player\");\n    let parent = player.parentNode;\n    parent.replaceChild(clone, player);\n  }\n\n  receiveNewPlaylist({playlist, musicType, id}) {\n    if (!window.player) {\n      this.setState({ playlist: [], musicType: null, id: null, playing: false });\n      return null;\n    }\n    window.player.pause();\n    window.player.src = playlist[0].songUrl;\n    window.player.volume = this.state.volume;\n    if (window.localStorage.getItem(\"currentMusic\") !== \"none\") {\n      window.player.play();\n    }\n    \n    this.setState({ playlist: playlist, musicType, id, playing: true });\n  }\n\n\n  playNext() {\n    let length = this.state.playlist.length;\n    let prevSongs = [...this.state.prevSongs];\n    if (this.state.playlist[0]) {\n      prevSongs.push(this.state.playlist[0]);\n    }\n    if (length === 1) {\n      window.player.pause();\n      if (prevSongs[0]) {\n        window.player.src = prevSongs[0].songUrl;\n      }\n      window.player.load();\n      window.player.play();\n      this.setState({ playlist: prevSongs, prevSongs: [] });\n    } else {\n      let newList = this.state.playlist.slice(1);\n      window.player.pause();\n      if (newList[0]) {\n        window.player.src = newList[0].songUrl\n        window.player.load();\n        window.player.play();\n      }\n      this.setState({ playlist: newList, prevSongs: prevSongs });\n    }\n  }\n\n\n  changeVolume(e) {\n    if (window.player) {\n      window.player.volume = ( e.currentTarget.value / 100 );\n      this.setState({ volume: e.currentTarget.value / 100 });\n    }\n  }\n\n  changeCurrentTime(e) {\n    if (window.player) {\n      let duration = window.player.duration;\n      let inputVal = parseInt(e.currentTarget.value) / 100;\n      let newTime = duration * inputVal;\n      if (newTime >= 0 && newTime <= duration) {\n        window.player.currentTime = newTime;\n        this.setState({ timeInputVal: parseInt(e.currentTarget.value) });\n      } else {\n        window.player.currentTime = 0;\n        this.setState({ timeInputVal: 0 });\n      }\n    }\n  }\n\n  shuffleGenreSongs(playlist) {\n    let length = playlist.length;\n    let temp;\n    let randomIdx;\n    while (length > 0) {\n      randomIdx = Math.floor(Math.random() * length);\n      length -= 1;\n      temp = playlist[length];\n      playlist[length] = playlist[randomIdx];\n      playlist[randomIdx] = temp;\n    }\n    return playlist;\n  }\n\n\n  render() {\n    let musicPlayer = (\n      <audio className=\"music-player\" id=\"player\">\n        <source \n          src={this.state.playlist && this.state.playlist[0] ? this.state.playlist[0].songUrl : null} \n          type=\"audio/mpeg\" \n        />\n      </audio>\n    );\n\n    let playOrPause = (\n      <i\n    className={window.player && !window.player.paused ? \"fas fa-pause\" : \"fas fa-play\"}\n    id=\"playpause\"\n    onClick={() => {\n      if (window.player.paused) {\n        window.player.play();\n        this.setState(Object.assign(this.state, {playing: true}));\n      } else {\n        window.player.pause();\n        this.setState(Object.assign(this.state, {playing: false}));\n      }\n    }}\n    />\n    )\n\n    let fastForward = (\n      this.state.playlist && this.state.playlist.length > 0 ? (\n        <div>\n          <i className=\"fas fa-forward\"\n            id=\"forward\"\n            onClick={ this.playNext }\n          ></i>\n        </div>\n      ) : (\n        \"\"\n      )\n    );\n\n    let timeInput = (\n      (window.player && window.player.src.length > 0) ? (\n        <input type=\"range\" id=\"timeskip\"\n          onChange={this.changeCurrentTime} \n        />\n      ) : (\n        \"\"\n      )\n    )\n\n    \n    let volumeInput = (\n      <input type=\"range\" id=\"volume\" \n        onChange={this.changeVolume} value={this.state.volume * 100}\n      />\n    );\n    let volumeIcon;\n    if (this.state.volume === 0) {\n      volumeIcon = (\n        <i className=\"fas fa-volume-off\"\n        onClick={() => {\n          this.setState({ volume: 0.5 });\n          window.player.volume = 0.5;\n        }}\n        ></i>\n      )\n    } else if (this.state.volume < 0.6) {\n      volumeIcon = (\n        <i className=\"fas fa-volume-down\"\n          onClick={() => {\n            this.setState({ volume: 0 });\n            window.player.volume = 0;\n          }}\n        ></i>\n      )\n    } else {\n      volumeIcon = (\n        <i\n          className=\"fas fa-volume-up\"\n          onClick={() => {\n            this.setState({ volume: 0 });\n            window.player.volume = 0;\n          }}\n        ></i>\n      )\n    }\n\n    let volume = (\n      <div className=\"volume-container\">\n        { volumeIcon }\n        { volumeInput }\n      </div>\n    );\n\n\n\n    let currentSong;\n    if (this.state.playlist.length > 0) {\n      currentSong = this.state.playlist[0];\n    }\n\n    let currentSongTitle = (\n      this.state.playlist.length > 0 ? (\n        <div className=\"music-player-current-title\">\n          { currentSong.title }\n        </div> \n      ) : (\n        <div className=\"no-song-title-container\">\n          <div className=\"music-player-current-title-none\">\n            Композиция не выбрана\n          </div>\n        </div>\n      )\n    );\n\n\n    let currentSongModule = (\n      <div className=\"current-song-module\">\n        { this.state.playlist && this.state.playlist.length > 0 ? (\n            <CurrentSongShow \n              songId={currentSong._id}\n            />\n          ) : (\n            <div className=\"current-song-nothing-selected\">No song selected</div>\n          ) }\n      </div>\n    )\n\n \n    return (\n      <div className=\"music-player-main-main\">\n        {this.state.minimized ? ( \n          \"\" \n        ) : ( \n          <div \n            className=\"music-player-modal\"\n            onClick={() => this.setState({ minimized: true })}>\n            {rainCloud}\n          </div>\n        )}\n\n        <Query query={CURRENT_MUSIC_QUERY}>\n          {({ loading, error, data }) => {\n            if (loading) return null;\n            if (error) return null;\n            \n\n            if (data.currentMusic.musicType === \"song\") {\n              return (\n                <Query\n                  query={Queries.FETCH_SONG}\n                  variables={{ id: data.currentMusic.id }}\n                >\n                  {({ loading, error, data }) => {\n                    if (loading) return <p>Loading...</p>;\n                    if (error) return <p>Error</p>;\n                    \n\n                    if (this.state.playlist[0] !== data.song) {\n                      this.receiveNewPlaylist({\n                        playlist: [data.song],\n                        musicType: \"song\",\n                        id: data.song._id\n                      });\n                    }\n                    return null;\n                  }}\n                </Query>\n              );\n            } else if (data.currentMusic.musicType === \"genre\") {\n              return (\n                <Query\n                  query={Queries.FETCH_GENRE_SONGS}\n                  variables={{ id: data.currentMusic.id }}\n                >\n                  {({ loading, error, data }) => {\n                    if (loading) return <p>Loading...</p>;\n                    if (error) return <p>Error</p>;\n\n                    if (this.state.id !== data.genre._id) {\n                      let newList = [];\n                      let artists = data.genre.artists;\n                      for (let i = 0; i < artists.length; i++) {\n                        let songs = artists[i].songs;\n                        for (let j = 0; j < songs.length; j++) {\n                          newList.push(songs[j]);\n                        }\n                      }\n                      newList = this.shuffleGenreSongs(newList);\n                      this.receiveNewPlaylist({\n                        playlist: newList,\n                        musicType: \"genre\",\n                        id: data.genre._id\n                      });\n                    }\n                    return null;\n                  }}\n                </Query>\n              );\n            } else if (data.currentMusic.musicType === \"playlist\") {\n              return (\n                <Query\n                  query={Queries.FETCH_PLAYLIST}\n                  variables={{ id: data.currentMusic.id }}\n                >\n                  {({ loading, error, data }) => {\n                    if (loading) return <p>Loading...</p>;\n                    if (error) return <p>Error</p>;\n\n                    if (this.state.id !== data.playlist._id) {\n                      let newList = [];\n                      let songs = data.playlist.songs;\n                      for (let i = 0; i < songs.length; i++) {\n                        newList.push(songs[i]);\n                      }\n                      this.receiveNewPlaylist({\n                        playlist: newList,\n                        musicType: \"playlist\",\n                        id: data.playlist._id\n                      });\n                    }\n                    return null;\n                  }}\n                </Query>\n              );\n            } else if (data.currentMusic.musicType === \"likedSongs\") {\n              return (\n                <Query\n                  query={Queries.FETCH_LIKED_SONGS}\n                  variables={{id: data.currentMusic.id}}\n                >\n                  {({loading, error, data}) => {\n                    if (loading) return <p>Loading...</p>;\n                    if (error) return <p>Error</p>;\n                    if (this.state.id !== data.user._id) {\n                      let newList = [];\n                      let songs = data.user.likedSongs;\n                      for (let i = 0; i < songs.length; i++) {\n                        newList.push(songs[i]);\n                      }\n                      this.receiveNewPlaylist({\n                        playlist: newList,\n                        musicType: \"likedSongs\",\n                        id: data.user._id\n                      });\n                    }\n                    return null;\n                  }}\n                </Query>\n              )\n            }\n              \n          }}\n        </Query>\n        <div className=\"music-player-main\">\n          <div className=\"music-player-minimized\">\n            <div className=\"music-player-left\">\n              {musicPlayer}\n              <div className=\"music-play-button-container\">\n                { playOrPause }\n                { fastForward }\n                <div className=\"time-track-and-skip\">\n                  <span id=\"tracktime-1\"></span> \n                  { timeInput }\n                  { timeInput === \"\" ? (\n                    \"\"\n                  ) : (\n                    <span id=\"tracktime-divider-hidden\">/</span>\n                  )}\n                  <span id=\"tracktime-2\"></span>\n                </div>\n              </div>\n              { currentSongTitle }\n            </div>\n            <div className=\"music-player-right\">\n              {window.player && window.player.src ? volume : <span></span>}\n              <i className=\"fas fa-bars music-player-hambuger\"></i>\n            </div>\n          </div>\n          \n          { this.state.minimized ? (\n            <div className=\"music-player-current-song-show minimized\">\n              { currentSongModule }\n            </div>\n          ) : (\n            <div className=\"music-player-current-song-show\">\n              { currentSongModule }\n            </div>\n          )}\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default MusicPlayer;","import React, { Component } from \"react\";\nimport { Mutation, Query } from \"react-apollo\";\nimport Mutations from \"../../graphql/mutations\";\nimport Queries from \"../../graphql/queries\";\n\nconst { NEW_PLAYLIST } = Mutations;\nconst { CURRENT_USER } = Queries;\n\n\nclass PlaylistCreate extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      title: \"\",\n      description: \"\"\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  update(field) {\n    return e => this.setState({ [field]: e.target.value });\n  }\n\n  handleSubmit(e, newPlaylist, currentUser) {\n    e.preventDefault();\n    let title = this.state.title;\n    newPlaylist({\n      variables: {\n        user: currentUser,\n        title: title,\n        description: this.state.description\n      }\n    }).then(() => this.props.closeModal());\n  }\n\n  render() {\n    let { closeModal } = this.props;\n\n    return (       \n      <Query query={CURRENT_USER}>\n        {({ loading, error, data }) => {\n          if (loading) return <option>Загрузка...</option>;\n          if (error) return <option>{error}</option>;\n          const {currentUser} = data;\n\n          return (\n            <Mutation mutation={NEW_PLAYLIST}>\n              {(newPlaylist) => (\n              <div>\n                <form onSubmit={e => this.handleSubmit(e, newPlaylist, currentUser)}>\n                <div className=\"modal-container\">\n                  <h1 id=\"new-playlist-header\">Новый плейлист</h1>\n                  <div className=\"new-playlist-input-container\">\n                    <div className=\"new-playlist-input-box\">\n                      <div className=\"new-playlist-content-spacing\">\n                        <input\n                          type=\"text\"\n                          onChange={this.update(\"title\")}\n                          className=\"new-playlist-inputBox-input\"\n                          value={this.state.title}\n                          placeholder=\"Введите название плейлиста\"\n                        />\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"modal-buttons\">\n                    <button className=\"modal-button-cancel\" onClick={closeModal}>\n                      Отмена\n                    </button>\n                    <button className=\"modal-button-create\" type=\"submit\">\n                      Добавить\n                    </button>\n                  </div>\n                </div>\n              </form>\n            </div>\n            )}\n          </Mutation>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default PlaylistCreate;\n","import React from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport { Mutation, Query } from \"react-apollo\";\nimport Mutations from \"../../graphql/mutations\";\nimport Queries from \"../../graphql/queries\";\n\nconst { ADD_PLAYLIST_SONG } = Mutations;\nconst { FETCH_PLAYLISTS, CURRENT_USER } = Queries;\n\nclass AddSongToPlaylist extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.setImages = this.setImages.bind(this);\n    this.createImages = this.createImages.bind(this);\n  }\n\n  setImages(playlistSongs) {\n    let songImages = [];\n    if (playlistSongs !== undefined) {\n      songImages = playlistSongs.map(song => {\n        return song.imageUrl;\n      });\n    }\n    return this.createImages(songImages);\n  }\n\n  createImages(songImages) {\n    if (songImages.length >= 1 && songImages.length < 4) {\n      return (\n        <div className=\"playlist-art-container\">\n          <img src={songImages[0]} alt=\"\" />\n        </div>\n      );\n    } else if (songImages.length >= 4) {\n      return songImages.slice(0, 4).map(img => {\n        return (\n          <div key={img} className=\"playlist-idx-coverArt-item\">\n            <img src={img} alt=\"\" />\n          </div>\n        );\n      });\n    } else {\n      return (\n        <div className=\"playlist-art-container\">\n          <img src=\"https://www.andrewwkmusic.com/wp-content/uploads/2014/05/No-album-art-itunes.jpg\" />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    let { closeModal } = this.props;\n    return (\n      <Query query={CURRENT_USER}>\n        {({ loading, error, data }) => {\n          if (loading) return <option>Loading...</option>;\n          if (error) return <option>{error}</option>;\n          const { currentUser } = data;\n\n          return (\n            <Query query={FETCH_PLAYLISTS}>\n            {({ loading, error, data }) => {\n              if (loading) return <h1>Loading...</h1>;\n              if (error) return <h1>{error}</h1>;\n\n              return (\n                <div className=\"modal-container\">\n                  <h1 id=\"new-playlist-header\">Добавить песню в плейлист</h1>\n                  <div className=\"asp-playlistIndexContainer\">\n\n                    <div className=\"modal-buttons\">\n                      <button className=\"modal-button-cancel\" onClick={closeModal}>\n                        Отмена\n                      </button>\n                    </div>\n\n                    <div className=\"results\">\n                      {data.playlists.map(playlist => {\n                        if (playlist.user._id === currentUser) {\n                          return (\n                            <div key={playlist._id} \n                              className=\"album-artist-container\">\n                              <Mutation mutation={ADD_PLAYLIST_SONG}>\n                                {addSong => (           \n                                  <div\n                                  className=\"atp-image-hover-container\"\n                                  onClick={() => {\n                                    addSong({\n                                      variables: {\n                                        playlistId: playlist._id,\n                                        songId: this.props.songId\n                                      }\n                                    }).then(() => this.props.closeModal());\n                                  }}\n                                  >\n                                    {this.setImages(playlist.songs)}\n                                    <div className=\"Mike\">\n                                      <button id=\"Mike-button\">\n                                        <svg width=\"51px\" height=\"52px\" viewBox=\"88 88 51 52\">\n                                          <path\n                                            d=\"M98,88 C92.477,88 88,92.477 88,98 C88,103.523 92.477,108 98,108 C103.523,108 108,103.523 108,98 C108,92.476 103.523,88 98,88 L98,88 Z M105.001,98.999 L99.001,98.999 L99.001,104.999 L97.001,104.999 L97.001,98.999 L91.001,98.999 L91.001,96.999 L97.001,96.999 L97.001,90.999 L99.001,90.999 L99.001,96.999 L105.001,96.999 L105.001,98.999 L105.001,98.999 Z M112.751,95.345 C112.868,95.998 112.938,96.665 112.967,97.344 L137,92.234 L137,119.265 C135.349,117.221 132.826,115.909 130,115.909 C125.038,115.909 121,119.947 121,124.909 C121,129.872 125.038,133.909 130,133.909 C134.962,133.909 139,129.872 139,124.909 L139,89.765 L112.751,95.345 L112.751,95.345 Z M130,131.909 C126.14,131.909 123,128.769 123,124.909 C123,121.05 126.14,117.909 130,117.909 C133.86,117.909 137,121.05 137,124.909 C137,128.77 133.859,131.909 130,131.909 L130,131.909 Z M105,125.354 C103.348,123.311 100.826,121.999 98,121.999 C93.037,121.999 89,126.037 89,130.999 C89,135.961 93.037,139.999 98,139.999 C102.963,139.999 107,135.961 107,130.999 L107,109.972 C106.368,110.448 105.704,110.884 105,111.257 L105,125.354 L105,125.354 Z M98,137.999 C94.14,137.999 91,134.859 91,130.999 C91,127.139 94.14,123.999 98,123.999 C101.86,123.999 105,127.139 105,130.999 C105,134.858 101.859,137.999 98,137.999 L98,137.999 Z\"\n                                            stroke=\"none\"\n                                            fill=\"#FFFFFF\"\n                                            fillRule=\"evenodd\"\n                                          >\n                                            <title>Добавить в плейлист</title>\n                                          </path>\n                                        </svg>\n                                      </button>\n                                    </div>\n                                  </div>\n                                )}\n                              </Mutation>\n                              <div className=\"asp-artist\">{playlist.title}</div>\n                              <div className=\"asp-trackCount\">\n                                {playlist.songs.length}\n                                {playlist.songs.length > 1 || playlist.songs.length === 0\n                                  ? \" композиций\"\n                                  : \" композиция\"}\n                              </div>\n                            </div>\n                          );\n                        }\n                      })}\n                    </div>\n                  </div>\n                </div>\n              );\n              }}\n            </Query>\n          )\n        }}\n      </Query>\n    )\n  }\n};\n\n\nexport default withRouter(AddSongToPlaylist);\n\n","import React from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport PropTypes from \"prop-types\";\nimport gql from \"graphql-tag\";\nimport \"./ModalContent.scss\";\nimport NewPlaylist from \"../playlists/new_playlist\"\nimport NewPlaylistSong from \"../playlists/add_song_to_playlist\";\n\nconst MODAL_OPEN_QUERY = gql`\n  query {\n    isModalOpen @client\n  }\n`;\n\nconst MODAL_TYPE_QUERY = gql`\n  query {\n    modalType @client,\n    songId @client\n  }\n`;\n\nconst CLOSE_MODAL_MUTATION = gql`\n  mutation {\n    closeModalMutation @client\n  }\n`;\n\nconst Modal = () => (\n  <Query query={MODAL_OPEN_QUERY}>\n    {({ data }) => {\n      if (data.isModalOpen){\n        return <Query query={MODAL_TYPE_QUERY}>\n          {({ data }) => {\n            if (data.modalType === \"newPlaylist\") {\n              return (\n                <Mutation mutation={CLOSE_MODAL_MUTATION}>\n                  {closeModal => {\n                    return (\n                      <div className=\"modal-background\">\n                        <div\n                          className=\"modal-child-np\"\n                          onClick={e => e.stopPropagation()}\n                        >\n                          <NewPlaylist closeModal={closeModal} />\n                        </div>\n                      </div>\n                    );\n                  }}\n                </Mutation>\n              );\n            } else if (data.modalType === \"newPlaylistSong\") {\n              return (\n                <Mutation mutation={CLOSE_MODAL_MUTATION}>\n                  {closeModal => {\n                    return (\n                      <div className=\"modal-background\">\n                        <div\n                          className=\"modal-child-asp\"\n                          onClick={e => e.stopPropagation()}\n                        >\n                          <NewPlaylistSong closeModal={closeModal} songId={data.songId}/>\n                        </div>\n                      </div>\n                    );\n                  }}\n                </Mutation>\n              );\n            }\n        }         \n      } \n        </Query>\n\n      } else {\n        return null;\n      }\n    }\n  }\n  </Query>\n);\n\nModal.propTypes = {\n  close: PropTypes.func.isRequired\n};\n\nexport default Modal;\n","import React from \"react\";\nimport { Query } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { Link } from \"react-router-dom\";\nimport Mutations from \"../../graphql/mutations\";\n\nconst OPEN_MODAL_MUTATION = gql`\n  mutation {\n    openNewPlaylistSongModalMutation(id: $id) @client\n  }\n`;\n\nconst PLAY_SONG_MUTATION = gql`\n  mutation {\n    playSongMutation(id: $id) @client\n  }\n`\n\nconst PLAY_GENRE_MUTATION = gql`\n  mutation {\n    playGenreMutation(id: $id) @client\n  }\n`\n\nclass GenreShow extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      playingGenre: false,\n      playingSongId: null\n    };\n    this.renderLikeButton = this.renderLikeButton.bind(this);\n  }\n\n  renderLikeButton(songId, song) {\n    let currentUserId = this.state.currentUserId;\n    \n    if (!song.likes.includes(currentUserId)) {\n      return (\n        <Mutation \n          mutation={Mutations.ADD_SONG_LIKE}\n          refetchQueries={[\n            {\n              query: Queries.FETCH_LIKED_SONGS,\n              variables: { id: this.state.currentUserId }\n            }\n          ]}\n        >\n          {addSongLike => (\n            <i className=\"far fa-heart\" onClick={() => {\n              addSongLike({\n                variables: {\n                  songId, \n                  userId: currentUserId\n                }\n              });\n            }}>\n            </i>\n          )}\n        </Mutation>\n      )\n    } else {\n      return (\n        <Mutation \n          mutation={Mutations.REMOVE_SONG_LIKE}\n          refetchQueries={[\n            {\n              query: Queries.FETCH_LIKED_SONGS,\n              variables: { id: this.state.currentUserId }\n            }\n          ]}\n        >\n          {removeSongLike => (\n            <i className=\"fas fa-heart\" onClick={() => {\n              removeSongLike({\n                variables: {\n                  songId,\n                  userId: currentUserId\n                }\n              });\n            }}>\n            </i>\n          )}\n        </Mutation>\n      )\n    }\n  }\n\n  render() {\n    return (\n        <Query query={Queries.FETCH_GENRE} variables={{id: this.props.match.params.genreId}}>\n          {({ loading, error, data }) => {\n          if (loading) return <div className=\"genre-show-main\"><div class=\"loader\">Loading...</div></div>;;\n            if (error) return <p>Error</p>;\n            \n            return (\n              <div className=\"genre-show-main\">\n                <h1 className=\"genre-index-header\">\n                  {data.genre.name}\n\n                  { this.state.currentUserId ? (\n                    <span></span>\n                  ) : (\n                    <Query query={Queries.CURRENT_USER}>\n                      {({ loading, error, data }) => {\n                        if (loading) return <div className=\"genre-show-main\"></div>;\n                        if (error) return <p>Error</p>;\n                        if (data) {\n                          this.setState({currentUserId: data.currentUser})\n                        }\n                        return (\n                          <span></span>\n                        )\n                      }}\n                    </Query>\n                  )}\n\n                  <Mutation mutation={PLAY_GENRE_MUTATION}>\n                    {\n                      playGenreMutation => {\n                        if (this.state.playingGenre) {\n                        return null;\n                      }\n                        return (\n                            <i \n                            className=\"fas fa-random\"\n                            onClick={() => {\n                              playGenreMutation(\n                                { variables: { id: data.genre._id } }\n                              );\n                              this.setState({playingGenre: true, playingSongId: null});\n                            }}\n                          ></i>\n                        )\n                      }\n                    }\n                  </Mutation>\n                </h1>\n\n                {/* <ul className=\"genre-artists-list\"> */}\n                  {\n                    data.genre.artists.map(artist => {\n                      return (\n                        // <li key={artist._id} className=\"genre-artists-item\">\n                          <ul className=\"genre-artist-song-list\">\n                            {\n                              artist.songs.map(song => {\n                                return (\n                                  <div\n                                    key={song._id}\n                                    className=\"genre-artist-song-item\"\n                                  >\n                                  <div className=\"title-play-like\">\n                                    <Mutation mutation={PLAY_SONG_MUTATION}>\n                                      {\n                                        playSongMutation => {\n                                          return (\n                                            <i\n                                              className=\"fas fa-play-circle\"\n                                              onClick={() => {\n                                                playSongMutation(\n                                                  { variables: { id: song._id } }\n                                                );\n                                                this.setState({ playingSongId: song._id, playingGenre: false });\n                                              }}\n                                            ></i>\n                                          );\n                                        }\n                                      }\n                                    </Mutation>\n                                    <div>\n                                      {this.state.currentUserId ? (\n                                        this.renderLikeButton(song._id, song)\n                                      ) : null}\n                                    </div>\n                                    <span className={this.state.playingSongId !== song._id ? \"genre-artist-song-title\" :\"genre-artist-song-title-playing\"}>\n                                      {song.title}\n                                    </span>\n                                  </div>\n                                    <span className=\"genre-artist-item-name\">\n                                      <Link to={`/artists/${artist._id}`}>\n                                        {artist.name}\n                                      </Link>\n                                    </span>\n                                    <Mutation mutation={OPEN_MODAL_MUTATION}>\n                                      {openNewPlaylistSongModalMutation => {\n                                        return (\n                                        <span\n                                          className=\"genre-song-add-button\"\n                                          onClick={() => {\n                                            openNewPlaylistSongModalMutation(\n                                              { variables: { id: song._id } }\n                                            )\n                                          }}\n                                        >\n                                          Добавить в плейлист +\n                                        </span>\n                                      )}}\n                                    </Mutation>\n                                  </div>\n                                );\n                              })\n                            }\n                          </ul>\n                        // </li>\n                      )\n                    })\n                  }\n                  \n                {/* </ul> */}\n              </div>\n            )\n          }}\n        </Query>\n    )\n  }\n}\n\nexport default GenreShow;","import React from 'react';\nimport { Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport { ApolloConsumer, Query } from 'react-apollo';\nimport Mutations from \"../graphql/mutations\";\nimport queries from '../graphql/queries';\nconst { FETCH_ALL_ARTISTS } = queries;\n\nconst OPEN_MODAL_MUTATION = gql`\n  mutation {\n    openNewPlaylistSongModalMutation(id: $id) @client\n  }\n`;\n\nconst PLAY_SONG_MUTATION = gql`\n  mutation {\n    playSongMutation(id: $id) @client\n  }\n`\n\nclass ArtistShow extends React.Component{\n  constructor(props){\n    super(props);\n    this.state = {\n      songs: []\n    }\n    this.renderLikeButton = this.renderLikeButton.bind(this);\n  }\n\n  renderLikeButton(songId, song) {\n    let currentUserId = this.state.currentUserId;\n    if (!song.likes.includes(currentUserId)) {\n      return (\n        <Mutation\n          mutation={Mutations.ADD_SONG_LIKE}\n          refetchQueries={[\n            {\n              query: queries.FETCH_LIKED_SONGS,\n              variables: { id: this.state.currentUserId }\n            }\n          ]}\n        >\n          {addSongLike => (\n            <i className=\"far fa-heart\" onClick={() => {\n              addSongLike({\n                variables: {\n                  songId,\n                  userId: currentUserId\n                }\n              });\n            }}>\n            </i>\n          )}\n        </Mutation>\n      )\n    } else {\n      return (\n        <Mutation\n          mutation={Mutations.REMOVE_SONG_LIKE}\n          refetchQueries={[\n            {\n              query: queries.FETCH_LIKED_SONGS,\n              variables: { id: this.state.currentUserId }\n            }\n          ]}\n        >\n          {removeSongLike => (\n            <i className=\"fas fa-heart\" onClick={() => {\n              removeSongLike({\n                variables: {\n                  songId,\n                  userId: currentUserId\n                }\n              });\n            }}>\n            </i>\n          )}\n        </Mutation>\n      )\n    }\n  }\n\n  render(){\n    const artistId = window.location.href.split('/').slice(-1)[0];\n    \n    return(\n        <Query query={FETCH_ALL_ARTISTS}>\n          {({ loading, error, data }) => {\n          if (loading) return <div class=\"loader\">Loading...</div>;\n            if (error) return `Error! ${error}`;\n            for(let i = 0; i < data.artists.length; i++){\n              if (data.artists[i]._id === artistId){\n                this.artist = data.artists[i];\n              }\n            }\n            const banner = {\n              background: `url(${this.artist.imageUrl}) no-repeat`,\n              backgroundSize: 'cover',\n              backgroundPosition: '50% 50%'   \n            }\n\n            const artistSongs = this.artist.songs.map((song) => (\n              <li key={song.id} className='genre-artist-song-item'>\n                {/* <div className='artist-song-info'> */}\n                  <div className='artist-song-play'>\n                    <div className=\"title-play-like\">\n                    <div className='artist-play-btn'>\n                      {this.state.currentUserId ? (\n                        <span></span>\n                      ) : (\n                          <Query query={queries.CURRENT_USER}>\n                            {({ loading, error, data }) => {\n                              if (loading) return <div className=\"genre-show-main\"></div>;\n                              if (error) return <p>Error</p>;\n                              if (data) {\n                                this.setState({ currentUserId: data.currentUser })\n                              }\n                              return (\n                                <span></span>\n                              )\n                            }}\n                          </Query>\n                        )}\n                      <Mutation mutation={PLAY_SONG_MUTATION}>\n                        {\n                          playSongMutation => {\n                            return (\n                              <i\n                                className=\"fas fa-play-circle\"\n                                onClick={() => {\n                                  playSongMutation(\n                                    { variables: { id: song._id } }\n                                  )\n                                }}\n                              ></i>\n                            )\n                          }\n                        }\n                      </Mutation>\n                    </div>\n                    {this.state.currentUserId ? (\n                      this.renderLikeButton(song._id, song)\n                    ) : null}\n                    <p className='genre-artist-song-title'>{song.title}</p>\n                    </div>\n                  </div>\n                  <p className='genre-artist-item-name'>{this.artist.name}</p>\n                  <Mutation mutation={OPEN_MODAL_MUTATION}>\n                    {openNewPlaylistSongModalMutation => {\n                      return (\n                        <span\n                          className=\"genre-song-add-button\"\n                          onClick={() => openNewPlaylistSongModalMutation(\n                            { variables: { id: song._id } }\n                          )}\n                        >\n                          Добавить в плейлист +\n                                        </span>\n                      )\n                    }}\n                  </Mutation>\n                {/* </div> */}\n              </li>\n            )); \n            \n            return (\n              <div className='artist-show'>\n                <div className='artist-banner'>\n                  <div className='artist-banner-info'>\n                    <p className='artist-banner-name'>{this.artist.name}</p>\n                  </div>\n                  <div className='artist-pic' style={banner}>\n                  </div>\n                </div>\n                <div className='artist-songs'>\n                  <ul className='genre-artist-song-list'>\n                    {artistSongs}\n                  </ul>\n                </div>\n                <div className='artist-songs'>\n\n                </div>\n              </div>\n             );\n          }}\n        </Query>\n      \n    );\n  }\n}\n\nexport default ArtistShow;","import React from \"react\";\nimport { withRouter, Link } from \"react-router-dom\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../../graphql/mutations\";\nimport gql from \"graphql-tag\";\n\nconst { REMOVE_PLAYLIST_SONG } = Mutations;\n\nconst PLAY_SONG_MUTATION = gql`\n  mutation {\n    playSongMutation(id: $id) @client\n  }\n`;\n\nclass PlaylistShowItem extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      noteIcon: \"https://spottocry.s3-us-west-1.amazonaws.com/music_note.png\",\n      noteContainerClass: \"tc-outer-top\",\n      menuVisible: false\n    };\n\n    this.playNote = this.playNote.bind(this);\n    this.musicNote = this.musicNote.bind(this);\n    this.toggleMenu = this.toggleMenu.bind(this);\n  }\n\n  playNote() {\n    this.setState({\n      noteIcon: \"https://spottocry.s3-us-west-1.amazonaws.com/play.png\",\n      noteContainerClass: \"tc-outer-top-2\"\n    });\n  }\n\n  musicNote() {\n    this.setState({\n      noteIcon: \"https://spottocry.s3-us-west-1.amazonaws.com/music_note.png\",\n      noteContainerClass: \"tc-outer-top\"\n    });\n  }\n\n  toggleMenu() {\n    this.setState(prevState => ({\n      menuVisible: !prevState.menuVisible\n    }));\n  }\n\n  render() {\n    let { menuVisible } = this.state;\n    const { song } = this.props;\n    let noteContainerClass = this.state.noteContainerClass;\n    \n    return (\n      <div\n        onMouseEnter={this.playNote}\n        onMouseLeave={this.musicNote}\n        className=\"track-container\"\n      >\n        <div className=\"tc-outer\">\n          <div className={noteContainerClass}>\n            <Mutation mutation={PLAY_SONG_MUTATION}>\n              {playSongMutation => (\n                <img\n                  id=\"tc-note\"\n                  src={this.state.noteIcon}\n                  onClick={() => {\n                    playSongMutation({\n                      variables: { id: song._id }\n                    });\n                  }}\n                />\n              )}\n            </Mutation>\n          </div>\n        </div>\n        <div className=\"tc-title-artist\">\n          <div className=\"tc-title\">{song.title}</div>\n          <div className=\"tc-artist\"><Link to={`/artists/${song.artist._id}`}>{song.artist.name}</Link></div>\n        </div>\n        <div className=\"tc-context-menu\" title=\"More\">\n          <div className='genre-song-trash-button' >\n            <div className=\"cm-item\">\n              <Mutation mutation={REMOVE_PLAYLIST_SONG}>\n                {removeSong => (\n                  <div\n                    onClick={() => {\n                      removeSong({\n                        variables: {\n                          playlistId: this.props.playlistId,\n                          songId: song._id\n                        }\n                      });\n                    }}\n                  >\n                    Удалить\n                  </div>\n                )}\n              </Mutation>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default withRouter(PlaylistShowItem);\n","import React from \"react\";\nimport { withRouter } from 'react-router-dom';\nimport PlaylistShowItem from \"./playlist_show_item\";\nimport { Query } from \"react-apollo\";\nimport { Mutation } from \"react-apollo\";\nimport Mutations from \"../../graphql/mutations\";\nimport Queries from \"../../graphql/queries\";\nimport gql from \"graphql-tag\";\n\nconst { DELETE_PLAYLIST } = Mutations;\nconst { FETCH_PLAYLIST } = Queries;\n\nconst PLAY_PLAYLIST_MUTATION = gql`\n  mutation {\n    playPlaylistMutation(id: $id) @client\n  }\n`;\n\nclass PlaylistShow extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      menuVisible: false\n    };\n\n    this.toggleMenu = this.toggleMenu.bind(this);\n    this.setImages = this.setImages.bind(this);\n    this.createImages = this.createImages.bind(this);\n  }\n\n  toggleMenu() {\n    this.setState(prevState => ({\n      menuVisible: !prevState.menuVisible\n    }));\n  }\n\n  setImages(playlistSongs) {\n    let songImages = [];\n    if (playlistSongs !== undefined) {\n      songImages = playlistSongs.map(song => {\n        return song.imageUrl;\n      });\n    }\n    return this.createImages(songImages);\n  }\n\n  createImages(songImages) {\n    if (songImages.length >= 1 && songImages.length < 4) {\n      return (\n        <div className=\"playlist-coverArt-single\">\n          <img src={songImages[0]} />\n        </div>\n      );\n    } else if (songImages.length >= 4) {\n      return songImages.slice(0, 4).map(img => {\n        return (\n          <div key={img} className=\"playlist-coverArt-item\">\n            <img src={img} />\n          </div>\n        );\n      });\n    } else {\n      return (\n        <div className=\"playlist-coverArt-single\">\n          <img src=\"https://www.andrewwkmusic.com/wp-content/uploads/2014/05/No-album-art-itunes.jpg\" />\n        </div>\n      );\n    }\n  }\n\n  render() {\n    return (\n      <Query\n        query={FETCH_PLAYLIST}\n        variables={{ id: this.props.match.params.playlistId }}\n      >\n        {({ loading, error, data }) => {\n          if (loading) return <div className=\"playlist-show-main\"><div class=\"loader\">Loading...</div></div>;\n          if (error) return <p>{error}</p>;\n          let playlistSongs;\n          let songs = data.playlist.songs;\n          let songCount = data.playlist.songs.length;\n          let { menuVisible } = this.state;\n\n          if (data.playlist.songs.length > 0) {\n            playlistSongs = data.playlist.songs.map(song => {\n              return (\n                <PlaylistShowItem\n                  key={song._id}\n                  song={song}\n                  playlistId={this.props.match.params.playlistId}\n                />\n              );\n            });\n          } else {\n            playlistSongs = \"\";\n          }\n\n          return (\n            <div className=\"playlist-show-main\">\n            <div className=\"playlist-show-c1\">\n              <div className=\"playlist-show-c2\">\n                <section id=\"album-show-section\">\n                  <div className=\"fluid-container\">\n                    <div className=\"fluid\">\n                      <div className=\"album-show-c3a\">\n                        <div className=\"album-show-c3a-content\">\n                          <div className=\"album-show-c3a-content-header\">\n                            <div className=\"cover-art-info\">\n                              <div className=\"cover-art-shadow\">\n                                <div>\n                                  <div className=\"playlist-cover-container\">\n           \n                                      {this.setImages(songs)}\n                \n                                  </div>\n                                </div>\n                                <button id=\"cover-art-play\" />\n                              </div>\n                              <div className=\"album-title-container\">\n                                <span>{data.playlist.title}</span>\n                              </div>\n                              {/* todo: send current user down to associate with playlist */}\n                              {/* <div className=\"album-artist\">Demo User</div>  */}\n                            </div>\n                          </div>\n                          {songCount > 0 && (\n                            <Mutation mutation={PLAY_PLAYLIST_MUTATION}>\n                              {playPlaylistMutation => (\n                                <div\n                                  className=\"album-show-left-play\"\n                                  onClick={() => {\n                                    playPlaylistMutation({\n                                      variables: {\n                                        id: this.props.match.params.playlistId\n                                      }\n                                    });\n                                  }}\n                                >\n                                  Играть\n                                </div>\n                              )}\n                            </Mutation>\n                          )}\n                          <div>\n                            <div className=\"album-show-c3a-bottom\">\n                              <p>\n                                {songCount ? songCount : 0}\n                                {songCount != 1 ? \" композиций\" : \" композиция\"}\n                              </p>\n                              <Mutation mutation={DELETE_PLAYLIST}>\n                                {deletePlaylist => (\n                                    <div\n                                        id=\"context-menu\"\n                                        className=\"context-menu-show\"\n                                        onClick={() => {\n                                          deletePlaylist({\n                                            variables: {\n                                              id: this.props.match.params.playlistId\n                                            }\n                                          })\n                                              .then(() =>\n                                                  this.props.history.push(\n                                                      \"/library/playlists\"\n                                                  )\n                                              )\n                                              .catch(err => {\n                                                console.log(err);\n                                              });\n                                        }}\n                                    >\n                                      <div className=\"context-menu-item\">\n                                        Удалить плейлист\n                                      </div>\n                                    </div>\n                                )}\n                              </Mutation>\n                            </div>\n                          </div>\n                        </div>\n                      </div>\n                      <div className=\"album-show-c3b\">{playlistSongs}</div>\n                    </div>\n                  </div>\n                </section>\n              </div>\n            </div>\n            </div>\n          );\n        }}\n      </Query>\n    );\n  }\n}\n\nexport default withRouter(PlaylistShow);\n","import React from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport Queries from \"../../graphql/queries\";\nimport Mutations from \"../../graphql/mutations\";\nimport gql from \"graphql-tag\";\nimport { Link } from \"react-router-dom\";\n\nconst PLAY_SONG_MUTATION = gql`\n  mutation {\n    playSongMutation(id: $id) @client\n  }\n`;\nconst OPEN_MODAL_MUTATION = gql`\n  mutation {\n    openNewPlaylistSongModalMutation(id: $id) @client\n  }\n`;\n\nconst PLAY_LIKED_SONGS = gql`\n  mutation {\n    playLikedSongs(id: $id) @client\n  }\n`;\n\nclass FavoritesIndex extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      currentUserId: null,\n      likedSongs: null\n    }\n    this.getLikedSongs = this.getLikedSongs.bind(this);\n    this.renderTrashIcon = this.renderTrashIcon.bind(this);\n  }\n\n  getLikedSongs() {\n    return (\n      <Query \n        query={Queries.FETCH_LIKED_SONGS}\n        variables={{id: this.state.currentUserId}}\n      >\n        {({loading, error, data}) => {\n          if (loading) return <div class=\"loader\">Загузка...</div>;\n          if (error) return <p>Ошибка</p>;\n          \n          const { user } = data;\n          if (this.state.likedSongs !== user.likedSongs) {\n            this.setState({ likedSongs: user.likedSongs });\n          }\n          return null;\n        }}\n      </Query>\n    )\n  }\n\n  renderTrashIcon(songId, song) {\n    let currentUserId = this.state.currentUserId;\n\n    return (\n      <Mutation\n        mutation={Mutations.REMOVE_SONG_LIKE}\n        refetchQueries={[\n          {\n            query: Queries.FETCH_LIKED_SONGS,\n            variables: { id: this.state.currentUserId }\n          }\n        ]}\n      >\n        {removeSongLike => (\n          <i className='genre-song-trash-button' onClick={() => {\n            removeSongLike({\n              variables: {\n                songId,\n                userId: currentUserId\n              }\n            });\n            let currentlyLiked = this.state.likedSongs;\n            let newLikedSongs = [];\n            for (let i = 0; i < currentlyLiked.length; i++) {\n              if (currentlyLiked[i]._id !== songId) {\n                newLikedSongs.push(currentlyLiked[i]);\n              }\n            }\n            this.setState({ likedSongs: newLikedSongs });\n          }}>Удалить\n          </i>\n        )}\n      </Mutation>\n    )\n  }\n\n  render() {\n    return (\n      <div className=\"favorites-index-main\">\n        <h1 className=\"genre-index-header\">\n          <span className=\"favorite-songs-header\">\n            Понравившиеся композиции\n          </span>\n          <Mutation \n            mutation={PLAY_LIKED_SONGS}\n            variables={{ id: this.state.currentUserId }}\n          >\n          </Mutation>\n          \n        </h1>\n\n        {this.state.currentUserId ? (\n          <div></div>\n          ) : (\n          <Query query={Queries.CURRENT_USER}>\n            {({ loading, error, data }) => {\n              if (loading) return <p>Loading...</p>;\n              if (error) return <p>Error</p>;\n\n              if (data) {\n                this.setState({currentUserId: data.currentUser});\n              }\n              return null;\n            }}\n          </Query>\n        )}\n\n        {(this.state.currentUserId && !this.state.likedSongs) ? (\n          this.getLikedSongs() ) : null }\n\n        {\n          this.state.likedSongs ? (\n            <ul className=\"genre-artist-song-list favorites-list\">\n              {this.state.likedSongs.map(song => {\n                return (\n                  <li\n                    key={song._id}\n                    className=\"genre-artist-song-item favorites-item\"\n                  >\n                    <Mutation mutation={PLAY_SONG_MUTATION}>\n                      {\n                        playSongMutation => {\n                          return (\n                            <i\n                              className=\"fas fa-play-circle\"\n                              onClick={() => {\n                                playSongMutation(\n                                  { variables: { id: song._id } }\n                                );\n                                this.setState({ \n                                  playingSongId: song._id, playingGenre: false \n                                });\n                              }}\n                            ></i>\n                          );\n                        }\n                      }\n                    </Mutation>\n                    \n                    <span className={this.state.playingSongId !== song._id ? \"genre-artist-song-title\" : \"genre-artist-song-title-playing\"}>\n                      {song.title}\n                    </span>\n                    <span className=\"genre-artist-item-name\">\n                      <Link to={`/artists/${song.artist._id}`}>\n                        {song.artist.name}\n                      </Link>\n                    </span>\n                    <Mutation mutation={OPEN_MODAL_MUTATION}>\n                      {openNewPlaylistSongModalMutation => {\n                        return (\n                          <span\n                            className=\"genre-song-add-button\"\n                            onClick={() => {\n                              openNewPlaylistSongModalMutation(\n                                { variables: { id: song._id } }\n                              )\n                            }}\n                          >\n                            Добавить в плейлист +\n                          </span>\n                        )\n                      }}\n                    </Mutation>\n                    {this.state.currentUserId ? (\n                      this.renderTrashIcon(song._id, song)\n                    ) : null}\n                  </li>\n                )\n              })}\n            </ul>\n          ) : (\n            null\n          )\n        }\n\n      </div>\n    )\n  }\n}\n\nexport default FavoritesIndex;","import React from 'react';\nimport {Switch} from \"react-router-dom\";\nimport Login from \"./auth/Login\";\nimport GenreIndex from \"./genres/GenreIndex\";\nimport AuthRoute from \"../util/route_util\";\nimport Nav from \"./navigation/Nav\";\nimport Register from \"./auth/Register\";\nimport SideBar from './navigation/SideBar';\nimport Search from './navigation/Search';\nimport Account from './navigation/Account';\nimport PlaylistIndex from \"./playlists/playlist_index\";\nimport MusicPlayer from \"./player/MusicPlayer\";\nimport Modal from \"./modal/Modal\";\nimport GenreShow from \"./genres/GenreShow\";\nimport ArtistShow from './Artist_Show';\nimport PlaylistShow from \"./playlists/playlist_show\";\nimport FavoritesIndex from \"./favorites/FavoritesIndex\";\n\nconst App = () => {\n  return (\n    <div className='full-app'>\n      <div className='app-content'>\n        <AuthRoute path='/' component={SideBar} routeType='protected' />\n        <AuthRoute path='/' component={Nav} routeType='protected' />\n        <Switch>\n          <AuthRoute exact path=\"/login\" component={Login} routeType=\"auth\" />\n          <AuthRoute exact path=\"/register\" component={Register} routeType=\"auth\" />\n          <AuthRoute exact path='/search' component={Search} routeType='protected' />\n          <AuthRoute exact path='/account' component={Account} routeType='protected' />\n          <AuthRoute exact path=\"/library/playlists/\" component={PlaylistIndex} routeType=\"protected\"/>       \n          <AuthRoute exact path=\"/\" component={GenreIndex} routeType=\"protected\"/>\n          <AuthRoute exact path=\"/genres/:genreId\" component={GenreShow} routeType=\"protected\" />\n          <AuthRoute exact path='/artists/:artistId' component={ArtistShow} routeType='protected' />\n          <AuthRoute exact path=\"/playlists/:playlistId\" component={PlaylistShow} routeType='protected' />\n          <AuthRoute exact path=\"/favorites\" component={FavoritesIndex} routeType='protected' />\n        </Switch>        \n        <Modal/>\n      </div>\n      <AuthRoute path=\"/\" component={MusicPlayer} routeType=\"protected\" />\n    </div>\n  );\n};\n\nexport default App;\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    window.location.hostname === '[::1]' ||\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const resolvers = {\n  Mutation: {\n    openNewPlaylistModalMutation: (_, args, { cache }) => {\n      cache.writeData({\n        data: { songId: null, isModalOpen: true, modalType: \"newPlaylist\" }\n      });\n      return null;\n    },\n    openNewPlaylistSongModalMutation: (_, args, { cache }) => {\n      cache.writeData({\n        data: { songId: args.id, isModalOpen: true, modalType: \"newPlaylistSong\" }\n      });\n      return null;\n    },\n\n    closeModalMutation: (_, args, { cache }) => {\n      cache.writeData({ data: { isModalOpen: false, modalType: null } });\n      return null;\n    },\n\n\n    playSongMutation: (_, args, { cache }) => {\n      Object.keys(cache.data.data).forEach(key =>\n        key.match(/^currentMusic/) && cache.data.delete(key)\n      );\n      cache.writeData({ \n        data: { currentMusic: { id: args.id, musicType: \"song\", __typename: \"SongType\" } } \n      });\n\n      let currentMusic = { id: args.id, musicType: \"song\", __typename: \"SongType\" };\n      window.localStorage.setItem(\"currentMusic\", JSON.stringify(currentMusic));\n      return null;\n    },\n\n    playPlaylistMutation: (_, args, {cache}) => {\n      cache.writeData({ \n        data: { currentMusic: { id: args.id, musicType: \"playlist\", __typename: \"PlaylistType\"} } \n      });\n      let currentMusic = { id: args.id, musicType: \"playlist\", __typename: \"PlaylistType\" };\n      window.localStorage.setItem(\"currentMusic\", JSON.stringify(currentMusic));\n      return null;\n    },\n\n    playGenreMutation: (_, args, {cache}) => {\n      cache.writeData({\n        data: { currentMusic: { id: args.id, musicType: \"genre\", __typename: \"GenreType\" } }\n      });\n      let currentMusic = { id: args.id, musicType: \"genre\", __typename: \"GenreType\" };\n      window.localStorage.setItem(\"currentMusic\", JSON.stringify(currentMusic));\n      return null;\n    },\n\n    playLikedSongs: (_, args, {cache}) => {\n      cache.writeData({\n        data: { currentMusic: { id: args.id, musicType: \"likedSongs\", __typename: \"SongType\" }}\n      });\n      let currentMusic = { id: args.id, musicType: \"likedSongs\", __typename: \"SongType\" };\n      window.localStorage.setItem(\"currentMusic\", JSON.stringify(currentMusic));\n      return null;\n    }\n  }\n};\n\nexport default resolvers;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport ApolloClient from \"apollo-client\";\nimport { InMemoryCache } from \"apollo-cache-inmemory\";\nimport { createHttpLink } from \"apollo-link-http\";\nimport { ApolloProvider } from \"react-apollo\";\nimport { onError } from \"apollo-link-error\";\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter } from \"react-router-dom\";\nimport Mutations from \"./graphql/mutations\";\nimport resolvers from \"./resolvers\";\nimport { ApolloLink} from \"apollo-link\"\nconst { VERIFY_USER } = Mutations;\n\nlet tempUri\nif (process.env.NODE_ENV === 'production') {\n  tempUri = \"https://my-web-projectt.herokuapp.com/graphql\"\n} else {\n  tempUri = \"http://localhost:5000/graphql\"\n}\n\nlet client;\nlet cache;\n\nasync function setupClient() {\n  cache = new InMemoryCache({\n    dataIdFromObject: object => object._id || null\n  });\n\n  const httpLink = createHttpLink({\n    uri: tempUri,\n    headers: {\n      authorization: localStorage.getItem(\"auth-token\")\n    }\n  });\n\n  const errorLink = onError(({ graphQLErrors }) => {\n    if (graphQLErrors) graphQLErrors.map(({ message }) => console.log(message));\n  });\n\n  client = new ApolloClient({\n    resolvers,\n    link: httpLink,\n    cache,\n    onError: ({ networkError, graphQLErrors }) => {\n      console.log(\"graphQLErrors\", graphQLErrors);\n      console.log(\"networkError\", networkError);\n    }\n  });\n  \n}\n\nasync function populateCache() {\n  const token = localStorage.getItem(\"auth-token\");\n\n  await cache.writeData({\n    data: {\n      isLoggedIn: Boolean(token),\n      isModalOpen: false\n    }\n  });\n\n\n  if (token) {\n    await client.mutate({\n    // client.mutate({\n      mutation: VERIFY_USER,\n      variables: {\n        token\n      }\n    })\n    .then(({\n      data\n    }) => {\n      cache.writeData({\n        data: {\n          isLoggedIn: data.verifyUser.loggedIn,\n          currentUser: data.verifyUser._id\n        }\n      });\n    });\n}\n}\n\nsetupClient()\n  .then(() => populateCache())\n  .then(() => {\n    const Root = () => {\n      return (\n        <ApolloProvider client={client}>\n          <HashRouter>\n            <App />\n          </HashRouter>\n        </ApolloProvider>\n      );\n    };\n\n    ReactDOM.render(<Root />, document.getElementById(\"root\"));\n  });\n\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}